name: Deploy FlopStudent

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    # 1. Récupérer le code
    - name: Checkout code
      uses: actions/checkout@v3

    # 2. Login Docker Hub
    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    # 3. Build & Push Frontend
    - name: Build and push Frontend Docker image
      uses: docker/build-push-action@v3
      with:
        context: ./frontend
        file: ./frontend/Dockerfile
        push: true
        tags: ${{ secrets.DOCKER_USERNAME }}/flopstudent-frontend:latest
        build-args: |
          VUE_APP_API_BASE_URL=${{ secrets.FRONTEND_API_BASE_URL }}

    # 4. Build & Push Backend
    - name: Build and push Backend Docker image
      uses: docker/build-push-action@v3
      with:
        context: ./backend
        file: ./backend/Dockerfile
        push: true
        tags: ${{ secrets.DOCKER_USERNAME }}/flopstudent-backend:latest

    # 5. Déployer sur le VPS
    - name: Deploy to Server
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.SSH_HOST }}
        username: ${{ secrets.SSH_USERNAME }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: |
          APP_DIR="/home/${{ secrets.SSH_USERNAME }}/flopStudent"
          
          # --- Préparation du serveur : Installation et Permissions ---
          # Assurez-vous que Docker est bien installé. docker-compose-plugin pour 'docker compose'
          # Note: C'est une bonne pratique de s'assurer que ces installations sont faites manuellement une fois
          # ou via une étape dédiée d'initialisation du serveur, plutôt que dans chaque déploiement.
          # Cependant, pour s'assurer que le script est auto-suffisant:
          sudo apt update
          sudo apt install -y docker-compose-plugin
          sudo usermod -aG docker ${{ secrets.SSH_USERNAME }}
          # Reconnexion nécessaire pour les changements de groupe, mais pas possible dans le script actuel.
          # Un 'newgrp docker' peut aider mais n'est pas toujours fiable dans un script non-interactif.
          # C'est une raison pour s'assurer que l'utilisateur est dans le groupe 'docker' AVANT le premier déploiement.

          # Ajouter github.com aux hôtes connus pour éviter l'échec de vérification de clé hôte
          mkdir -p ~/.ssh
          ssh-keyscan github.com >> ~/.ssh/known_hosts || true # '|| true' pour ignorer l'erreur si déjà présent
          chmod 600 ~/.ssh/known_hosts

          # Créer le dossier de l'application si besoin
          mkdir -p $APP_DIR
          cd $APP_DIR

          # --- Cloner/Puller le dépôt GitHub sur le serveur (pour docker-compose.yml et Dockerfiles) ---
          if [ -d "$APP_DIR/.git" ]; then
            echo "Mise à jour du dépôt existant..."
            git pull origin main
          else
            echo "Clonage du dépôt..."
            git clone git@github.com:${{ github.repository }}.git "$APP_DIR"
          fi

          # --- Créer ou mettre à jour le fichier .env pour le backend ---
          # N'écrase que si le fichier n'existe pas pour permettre les modifications manuelles sur le serveur.
          if [ ! -f backend/.env ]; then
              echo "PORT=3000" > backend/.env
              echo "MONGODB_URI=${{ secrets.BACKEND_MONGODB_URI }}" >> backend/.env
          else
              echo "Fichier backend/.env existe déjà. Pas de création automatique."
          fi

          # --- Déploiement du Backend (avec docker-compose) ---
          echo "Déploiement du backend..."
          docker compose pull backend
          docker compose up -d backend

          # --- Déploiement du Frontend (fichiers statiques via extraction) ---
          echo "Déploiement du frontend..."
          docker create --name temp_frontend_extract ${{ secrets.DOCKER_USERNAME }}/flopstudent-frontend:latest
          docker cp temp_frontend_extract:/app/dist $APP_DIR/frontend_dist
          docker rm temp_frontend_extract

          # Copier les fichiers du frontend vers le répertoire servi par Nginx
          sudo mkdir -p /var/www/flopstudent/frontend_dist
          sudo rsync -av --delete $APP_DIR/frontend_dist/ /var/www/flopstudent/frontend_dist/

          # Recharger Nginx pour prendre en compte les changements
          echo "Rechargement de Nginx..."
          sudo systemctl reload nginx

          echo "Déploiement terminé."